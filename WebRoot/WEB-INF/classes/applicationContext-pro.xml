<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
						http://www.springframework.org/schema/context
           				http://www.springframework.org/schema/context/spring-context-3.1.xsd
           				http://www.springframework.org/schema/mvc 
           				http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd 
						">

	<!-- 扫描service层 -->
	<context:component-scan base-package="com.dc.server,com.dc.platform,com.dc.timer" />
	
	
	<!-- 读取数据链接信息 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:jdbc.properties</value>
		</property>
	</bean>

	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="maxActive" value="20" />
		<property name="initialSize" value="1" />
		<property name="maxWait" value="60000" />
		<property name="maxIdle" value="20" />
		<property name="minIdle" value="3" />
		<property name="validationQuery" value="select sysdate from dual" />
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="180" />
	</bean>

	<!-- 由spring管理的事物 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 定义拦截器，用来指定事物属性，级别，和异常处理 -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="transactionAttributes">
			<props>
				<!-- PROPAGATION_SUPPORTS: 如果已经存在事务,则加入事务;如果没有事务,则以非事务的方式执行; PROPAGATION_MANDATORY: 
					使用当前事务, 如果没有, 则抛出异常; PROPAGATION_REQUIRED: 新建事务,如果当前有事务, 则挂起; PROPAGATION_NOT_SUPPORTED:以非事务的方式执行, 
					如果当前有事务, 则挂起; PROPAGATION_NEVER: 以非事务的方式执行, 如果当前有事务,则抛出异常; +/-Exception + 
					表示异常出现时事物提交 - 表示异常出现时事务回滚 -->
				<prop key="*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="search*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="del*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
			</props>
		</property>
	</bean>
	<!-- 用来定义那些类需要采用事物管理 spring 事物的动态代理类 BeanNameAutoProxyCreator 根据类名自动代理，接受表达式 -->  
    <bean id="BeanProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">  
        <property name="beanNames">  
            <!-- 对类名以TMService结尾的类进行代理 -->  
            <value>*Service</value>  
        </property>  
        <!-- 对代理类进行加载拦截器(实现通知的过程) -->  
        <property name="interceptorNames">  
            <list>  
                <value>transactionInterceptor</value>  
                 <!--     
                	此处增加新的Interceptor    
                -->  
            </list>  
        </property>  
    </bean>
	<bean id="baseDao" class="com.dc.platform.OracleBaseDaoImpl">
		<property name="dataSource" ref="dataSource" />
		<property name="databaseManager" ref="databaseManager" />
	</bean>
	
	<bean class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">  
        <property name="transactionInterceptor" ref="transactionInterceptor"/>  
    </bean> 
</beans>